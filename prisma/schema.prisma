// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model products {
  id         Int           @id @default(autoincrement())
  name       String
  price      Int
  detail     String?
  images     String[]
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime?     @map("updated_at")
  orderItems order_items[]
}

model users {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model orders {
  id           Int           @id @default(autoincrement())
  status       order_status
  totalAmount  Decimal       @map("total_amount") @db.Decimal(10, 2)
  customerName String        @map("customer_name")
  email        String
  phoneNumber  String        @map("phone_number")
  postalCode   String        @map("postal_code")
  prefecture   String
  city         String
  building     String
  sessionId    String        @map("session_id")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  orderItems   order_items[]
}

model order_items {
  id        Int      @id @default(autoincrement())
  orderId   Int      @map("order_id")
  order     orders   @relation(fields: [orderId], references: [id])
  productId Int      @map("product_id")
  product   products @relation(fields: [productId], references: [id])
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
}

enum order_status {
  PENDING
  PAID
  SHIPPED
  DELIVERED
}
